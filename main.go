package main

import (
	"context"
)

type GetTodosRequest struct {
	ID int
}
type GetTodosResponse struct {
	Todos []Todo
}
type Todo struct {
	Title       string
	Description string
}

func getTodos(ctx context.Context, input GetTodosRequest) (GetTodosResponse, error) {
	return GetTodosResponse{
		Todos: []Todo{},
	}, nil
}
func addTodos(ctx context.Context, input Todo) error {
	return nil
}

func main() {
	s := Create("myServer")

	router := s.Router()

	// 1. Generic usage for most use cases
	// todo :  error handling while creating these routes

	router.Query("/myQuery1", addTodos)
	// router.Mutation("myQuery2", addTodos)

	// 2. Configuring HTTP Parameters
	// router.Query("myQuery3", getTodos).setMethod("POST").setURL("/v1/some-weird-api")

	// 3. Starting the server
	s.Start()

	// /************************************************************/
	// /* Don't implement the following now. Keep it for reference */
	// /************************************************************/

	// // 1. Configuring middlewares on the router level
	// // Note. I can call `Use` multiple times. Each middleware needs to be stored in order
	// router.Use(client.Middlewares.PolicyIsAdmin()) // Note: client is autogenerated sdk we will create
	// router.Use(middleware1, middleware2) // Function parameter is spreaded

	// // 2. Apply middleware for specific route only
	// router.With(middleware1, middleware2).Query("myQuery4", getTodos) // Note: With creates a new subrouter with `Use` called internally.

	// // 3. Configuring subrouters (for simplified middleware management)
	// router.Use(middleware2, middleware3)
	// router.Use(middleware1)
	// router.Route(func(subrouter *server.Router){
	// 	subrouter.Query("query1")
	// 	subrouter.With(middleware5).Mutation("query2")

	// 	// Use can be called after Query, Mutation
	// 	subrouter.Use(middleware4)
	// })

	// router.Query("query3")

	// // In this example the following middlewares should be applied to each query in specified order
	// // query1 -> 2, 3, 1, 4
	// // query2 -> 2, 3, 1, 4, 5
	// // query3 -> 2, 3, 1

	// /************************************************************/
	// /*                    Config Management                     */
	// /************************************************************/
	// // Automatically create flags and env variables based on the fields in the struct
	// s.Configure(func (config *MyConfigStruct) {
	// 	// Configure your application here
	// })

	// /************************************************************/
	// /*                      Task Management                     */
	// /************************************************************/
	// // 1. Register a function for async tasks
	// router.Task("myTask1", func(ctx context.Context, p MyTaskParams)(Result, error) {
	// 	// Perform async task here
	// })

	// // 2. Register a function to receive a group of async tasks
	// // Note: Second param has to be an array when group option is provided
	// router
	// 	.Task("myTask2", func(ctx context.Context, p []*MyTaskParams)(Result, error) {
	// 	// Perform async task here
	// 	})
	// 	.On(client.Hooks.MyTask1Completed(), server.OptionHookFilter("'task2' in payload.types"))
	// 	.Group(/* Max # of tasks to group together */ 10)

	// // 3. Configure task management config on the server level
	// server.TaskConfig(&server.TaskConfig{
	// 	Concurrency: 40,							// Max number of tasks that can be processed concurrently
	// 	Queues: map[string]string{
	// 		"Premium": 60								// 60% of all tasks processed will be from premium queue
	// 		"Basic": 30									// 30% of all tasks processed will be from basic queue
	// 		"Free": 10									// 10% of all tasks processed will be from basic queue
	// 	},
	// 	Timeout: 2*time.Second,				// Default timeout for each individual task
	// 	RetryStrategy: &server.RetryStrategy{
	// 		MaxRetries: 10, 											// Maximum number of retries to perfrom - Default -1 (infinite)
	// 		MaxTimeInQueue: 10 * 24 * time.Hour		// Maximum time the task can be in queue - Default 1 day
	// 		BaseRetryInterval: 2*time.Second,			// Base retry interval
	// 		MaxRetryInterval: 10*time.Minutes			//
	// 	}
	// })

	// // 4. Configuring config on the task level
	// router
	// 	.Task("myTask3", myTask)
	// 	.Group(/* Max # of tasks to group together */ 10)
	// 	.Retries(5)
	// 	.Timeout(1*time.Second)
}
